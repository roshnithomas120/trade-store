plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'org.owasp.dependencycheck' version '9.0.9'
}

group = 'com.example.tradestore.'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.kafka:spring-kafka'

	runtimeOnly 'com.h2database:h2' // or mysql/postgresql driver
	runtimeOnly 'org.mongodb:mongodb-driver-sync' // Spring Boot brings Mongo

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.awaitility:awaitility:4.2.0'

	// Optional Testcontainers for MongoDB/Kafka if you want closer-to-prod tests
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mongodb'
	testImplementation 'org.testcontainers:kafka'

	// Security scanning (OWASP)
	implementation 'org.owasp:dependency-check-gradle:9.0.9'
}

dependencyCheck {
	// Optional: Set NVD API key in CI secrets and inject via env or gradle.properties
	// nvdApiKey = project.hasProperty('NVD_API_KEY') ? project.property('NVD_API_KEY') : null

	// Fail the build when a vulnerability equal to or above this CVSS score exists.
	// CVSS >= 9.0 typically matches "Critical"
	failBuildOnCVSS = 9.0

	// Report formats
	formats = ['HTML','XML','JSON']

	// Cache NVD data for 24h
	cveValidForHours = 24

	// Don't fail the build if the scanner itself fails (optional)
	failBuildOnError = false
}
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}


jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}
